{"version":3,"sources":["CandyMachine/index.js","CountdownTimer/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","SystemProgram","opts","CandyMachine","walletAddress","useState","machineState","setMachineState","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","fetchHashTable","hash","metadataEnabled","a","connection","Connection","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","length","account","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","data","mint","getProvider","Provider","window","solana","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","candyMachine","payer","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","provider","Program","fetchIdl","candyMachineProgram","idl","program","rpc","mintNft","txn","console","log","onSignatureWithOptions","notification","context","type","result","err","getCandyMachineState","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toLocaleDateString","toLocaleTimeString","uri","resp","json","parse","find","image","prevState","useEffect","className","currentDate","dropDate","renderDropTimer","onClick","disabled","map","src","alt","CountdownTimer","timerString","setTimerString","interval","setInterval","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","error","connectWallet","onLoad","addEventListener","removeEventListener","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.332d50d3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport CountdownTimer from '../CountdownTimer';\nimport {\n\tcandyMachineProgram,\n\tTOKEN_METADATA_PROGRAM_ID,\n\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './helpers';\nconst {\n\tmetadata: { Metadata, MetadataProgram },\n} = programs;\n\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n\tpreflightCommitment: 'processed',\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n\tconst [machineState, setMachineState] = useState(null);\n\tconst [mints, setMints] = useState([]);\n\tconst [isMinting, setIsMinting] = useState(false);\n\tconst [isLoadingMints, setIsLoadingMints] = useState(false);\n\n\t// Actions\n\tconst fetchHashTable = async (hash, metadataEnabled) => {\n\t\tconst connection = new web3.Connection(\n\t\t\tprocess.env.REACT_APP_SOLANA_RPC_HOST\n\t\t);\n\n\t\tconst metadataAccounts = await MetadataProgram.getProgramAccounts(\n\t\t\tconnection,\n\t\t\t{\n\t\t\t\tfilters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmemcmp: {\n\t\t\t\t\t\t\toffset:\n\t\t\t\t\t\t\t\t1 +\n\t\t\t\t\t\t\t\t32 +\n\t\t\t\t\t\t\t\t32 +\n\t\t\t\t\t\t\t\t4 +\n\t\t\t\t\t\t\t\tMAX_NAME_LENGTH +\n\t\t\t\t\t\t\t\t4 +\n\t\t\t\t\t\t\t\tMAX_URI_LENGTH +\n\t\t\t\t\t\t\t\t4 +\n\t\t\t\t\t\t\t\tMAX_SYMBOL_LENGTH +\n\t\t\t\t\t\t\t\t2 +\n\t\t\t\t\t\t\t\t1 +\n\t\t\t\t\t\t\t\t4 +\n\t\t\t\t\t\t\t\t0 * MAX_CREATOR_LEN,\n\t\t\t\t\t\t\tbytes: hash,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}\n\t\t);\n\n\t\tconst mintHashes = [];\n\n\t\tfor (let index = 0; index < metadataAccounts.length; index++) {\n\t\t\tconst account = metadataAccounts[index];\n\t\t\tconst accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n\t\t\tconst metadata = new Metadata(hash.toString(), accountInfo.value);\n\t\t\tif (metadataEnabled) mintHashes.push(metadata.data);\n\t\t\telse mintHashes.push(metadata.data.mint);\n\t\t}\n\n\t\treturn mintHashes;\n\t};\n\n\tconst getProvider = () => {\n\t\tconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n\n\t\tconst connection = new Connection(rpcHost);\n\t\tconst provider = new Provider(\n\t\t\tconnection,\n\t\t\twindow.solana,\n\t\t\topts.preflightCommitment\n\t\t);\n\n\t\treturn provider;\n\t};\n\n\tconst getMetadata = async (mint) => {\n\t\treturn (\n\t\t\tawait PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tBuffer.from('metadata'),\n\t\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\n\t\t\t\t\tmint.toBuffer(),\n\t\t\t\t],\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID\n\t\t\t)\n\t\t)[0];\n\t};\n\n\tconst getMasterEdition = async (mint) => {\n\t\treturn (\n\t\t\tawait PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tBuffer.from('metadata'),\n\t\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\n\t\t\t\t\tmint.toBuffer(),\n\t\t\t\t\tBuffer.from('edition'),\n\t\t\t\t],\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID\n\t\t\t)\n\t\t)[0];\n\t};\n\n\tconst getTokenWallet = async (wallet, mint) => {\n\t\treturn (\n\t\t\tawait web3.PublicKey.findProgramAddress(\n\t\t\t\t[wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n\t\t\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t\t\t)\n\t\t)[0];\n\t};\n\n\tconst mintToken = async () => {\n\t\ttry {\n\t\t\tsetIsMinting(true);\n\t\t\tconst mint = web3.Keypair.generate();\n\t\t\tconst token = await getTokenWallet(\n\t\t\t\twalletAddress.publicKey,\n\t\t\t\tmint.publicKey\n\t\t\t);\n\t\t\tconst metadata = await getMetadata(mint.publicKey);\n\t\t\tconst masterEdition = await getMasterEdition(mint.publicKey);\n\t\t\tconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n\t\t\tconst connection = new Connection(rpcHost);\n\t\t\tconst rent = await connection.getMinimumBalanceForRentExemption(\n\t\t\t\tMintLayout.span\n\t\t\t);\n\n\t\t\tconst accounts = {\n\t\t\t\tconfig,\n\t\t\t\tcandyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n\t\t\t\tpayer: walletAddress.publicKey,\n\t\t\t\twallet: process.env.REACT_APP_TREASURY_ADDRESS,\n\t\t\t\tmint: mint.publicKey,\n\t\t\t\tmetadata,\n\t\t\t\tmasterEdition,\n\t\t\t\tmintAuthority: walletAddress.publicKey,\n\t\t\t\tupdateAuthority: walletAddress.publicKey,\n\t\t\t\ttokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\tsystemProgram: SystemProgram.programId,\n\t\t\t\trent: web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\tclock: web3.SYSVAR_CLOCK_PUBKEY,\n\t\t\t};\n\n\t\t\tconst signers = [mint];\n\t\t\tconst instructions = [\n\t\t\t\tweb3.SystemProgram.createAccount({\n\t\t\t\t\tfromPubkey: walletAddress.publicKey,\n\t\t\t\t\tnewAccountPubkey: mint.publicKey,\n\t\t\t\t\tspace: MintLayout.span,\n\t\t\t\t\tlamports: rent,\n\t\t\t\t\tprogramId: TOKEN_PROGRAM_ID,\n\t\t\t\t}),\n\t\t\t\tToken.createInitMintInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tmint.publicKey,\n\t\t\t\t\t0,\n\t\t\t\t\twalletAddress.publicKey,\n\t\t\t\t\twalletAddress.publicKey\n\t\t\t\t),\n\t\t\t\tcreateAssociatedTokenAccountInstruction(\n\t\t\t\t\ttoken,\n\t\t\t\t\twalletAddress.publicKey,\n\t\t\t\t\twalletAddress.publicKey,\n\t\t\t\t\tmint.publicKey\n\t\t\t\t),\n\t\t\t\tToken.createMintToInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tmint.publicKey,\n\t\t\t\t\ttoken,\n\t\t\t\t\twalletAddress.publicKey,\n\t\t\t\t\t[],\n\t\t\t\t\t1\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tconst provider = getProvider();\n\t\t\tconst idl = await Program.fetchIdl(candyMachineProgram, provider);\n\t\t\tconst program = new Program(idl, candyMachineProgram, provider);\n\n\t\t\tconst txn = await program.rpc.mintNft({\n\t\t\t\taccounts,\n\t\t\t\tsigners,\n\t\t\t\tinstructions,\n\t\t\t});\n\n\t\t\tconsole.log('txn:', txn);\n\n\t\t\t// Setup listener\n\t\t\tconnection.onSignatureWithOptions(\n\t\t\t\ttxn,\n\t\t\t\tasync (notification, context) => {\n\t\t\t\t\tif (notification.type === 'status') {\n\t\t\t\t\t\tconsole.log('Receievd status event');\n\n\t\t\t\t\t\tconst { result } = notification;\n\t\t\t\t\t\tif (!result.err) {\n\t\t\t\t\t\t\tconsole.log('NFT Minted!');\n\t\t\t\t\t\t\tsetIsMinting(false);\n\t\t\t\t\t\t\tawait getCandyMachineState();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ commitment: 'processed' }\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tsetIsMinting(true);\n\t\t\tlet message = error.msg || 'Minting failed! Please try again!';\n\n\t\t\tif (!error.msg) {\n\t\t\t\tif (error.message.indexOf('0x138')) {\n\t\t\t\t} else if (error.message.indexOf('0x137')) {\n\t\t\t\t\tmessage = `SOLD OUT!`;\n\t\t\t\t} else if (error.message.indexOf('0x135')) {\n\t\t\t\t\tmessage = `Insufficient funds to mint. Please fund your wallet.`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (error.code === 311) {\n\t\t\t\t\tmessage = `SOLD OUT!`;\n\t\t\t\t} else if (error.code === 312) {\n\t\t\t\t\tmessage = `Minting period hasn't started yet.`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.warn(message);\n\t\t}\n\t};\n\n\tconst createAssociatedTokenAccountInstruction = (\n\t\tassociatedTokenAddress,\n\t\tpayer,\n\t\twalletAddress,\n\t\tsplTokenMintAddress\n\t) => {\n\t\tconst keys = [\n\t\t\t{ pubkey: payer, isSigner: true, isWritable: true },\n\t\t\t{ pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n\t\t\t{ pubkey: walletAddress, isSigner: false, isWritable: false },\n\t\t\t{ pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n\t\t\t{\n\t\t\t\tpubkey: web3.SystemProgram.programId,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t},\n\t\t\t{ pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\t\t\t{\n\t\t\t\tpubkey: web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t},\n\t\t];\n\t\treturn new web3.TransactionInstruction({\n\t\t\tkeys,\n\t\t\tprogramId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n\t\t\tdata: Buffer.from([]),\n\t\t});\n\t};\n\n\tconst getCandyMachineState = async () => {\n\t\tconst provider = getProvider();\n\t\tconst idl = await Program.fetchIdl(candyMachineProgram, provider);\n\t\tconst program = new Program(idl, candyMachineProgram, provider);\n\n\t\tconst candyMachine = await program.account.candyMachine.fetch(\n\t\t\tprocess.env.REACT_APP_CANDY_MACHINE_ID\n\t\t);\n\n\t\tconst itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n\t\tconst itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n\t\tconst itemsRemaining = itemsAvailable - itemsRedeemed;\n\t\tconst goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n\t\t// We will be using this later in our UI so let's generate this now\n\t\tconst goLiveDateTimeString = `${new Date(\n\t\t\tgoLiveData * 1000\n\t\t).toLocaleDateString()} @ ${new Date(\n\t\t\tgoLiveData * 1000\n\t\t).toLocaleTimeString()}`;\n\n\t\tconsole.log({\n\t\t\titemsAvailable,\n\t\t\titemsRedeemed,\n\t\t\titemsRemaining,\n\t\t\tgoLiveData,\n\t\t\tgoLiveDateTimeString,\n\t\t});\n\n\t\tsetMachineState({\n\t\t\titemsAvailable,\n\t\t\titemsRedeemed,\n\t\t\titemsRemaining,\n\t\t\tgoLiveData,\n\t\t\tgoLiveDateTimeString,\n\t\t});\n\n\t\tsetIsLoadingMints(true);\n\t\tconst data = await fetchHashTable(\n\t\t\tprocess.env.REACT_APP_CANDY_MACHINE_ID,\n\t\t\ttrue\n\t\t);\n\n\t\tif (data.length !== 0) {\n\t\t\tfor (const mint of data) {\n\t\t\t\tconst resp = await fetch(mint.data.uri);\n\t\t\t\tconst parse = await resp.json();\n\t\t\t\tconsole.log(mint, parse);\n\n\t\t\t\tif (!mints.find((mint) => mint === parse.image)) {\n\t\t\t\t\tsetMints((prevState) => [...prevState, parse.image]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsetIsLoadingMints(false);\n\t};\n\n\tconst renderMintedItems = () => (\n\t\t<div className=\"gif-container\">\n\t\t\t<p className=\"sub-text\">Minted Items ✨</p>\n\t\t\t<div className=\"gif-grid\">\n\t\t\t\t{mints.map((mint) => (\n\t\t\t\t\t<div className=\"gif-item\" key={mint}>\n\t\t\t\t\t\t<img src={mint} alt={`Minted NFT ${mint}`} />\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderDropTimer = () => {\n\t\tconst currentDate = new Date();\n\t\tconst dropDate = new Date(machineState.goLiveData * 1000);\n\n\t\tif (currentDate < dropDate) {\n\t\t\tconsole.log('Before drop date!');\n\t\t\treturn <CountdownTimer dropDate={dropDate} />;\n\t\t}\n\n\t\treturn <p>{`Drop Date: ${machineState.goLiveDateTimeString}`}</p>;\n\t};\n\n\tuseEffect(() => {\n\t\tgetCandyMachineState();\n\t}, []);\n\n\treturn (\n\t\tmachineState && (\n\t\t\t<div className=\"machine-container\">\n\t\t\t\t{renderDropTimer()}\n\t\t\t\t<p>{`Items Minted: ${machineState.itemsRedeemed} / ${machineState.itemsAvailable}`}</p>\n\t\t\t\t{machineState.itemsRedeemed === machineState.itemsAvailable ? (\n\t\t\t\t\t<p className=\"sub-text\">Sold Out 🙊</p>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"cta-button mint-button\"\n\t\t\t\t\t\tonClick={mintToken}\n\t\t\t\t\t\tdisabled={isMinting}\n\t\t\t\t\t>\n\t\t\t\t\t\tMint NFT\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t{isLoadingMints && <p>LOADING MINTS...</p>}\n\t\t\t\t{mints.length > 0 && renderMintedItems()}\n\t\t\t</div>\n\t\t)\n\t);\n};\n\nexport default CandyMachine;\n","import React, { useEffect, useState } from 'react';\r\nimport './CountdownTimer.css';\r\n\r\nconst CountdownTimer = ({ dropDate }) => {\r\n\tconst [timerString, setTimerString] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('Setting Interval...');\r\n\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\tconst currentDate = new Date().getTime();\r\n\t\t\tconst distance = dropDate - currentDate;\r\n\t\t\tconst days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n\t\t\tconst hours = Math.floor(\r\n\t\t\t\t(distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n\t\t\t);\r\n\t\t\tconst minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n\t\t\tconst seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n\t\t\tsetTimerString(`${days}days ${hours}m:${minutes}m:${seconds}s`);\r\n\r\n\t\t\tif (distance < 0) {\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\r\n\t\treturn () => {\r\n\t\t\tif (interval) {\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t}\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"timer-container\">\r\n\t\t\t<p className=\"timer-header\">Candy Drop Starting In</p>\r\n\t\t\t{timerString && <p className=\"timer-value\">{`⏰ ${timerString}`}</p>}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CountdownTimer;\r\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\tconst [walletAddress, setWalletAddress] = useState(null);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { solana } = window;\n\t\t\tif (solana) {\n\t\t\t\tif (solana.isPhantom) {\n\t\t\t\t\tconsole.log('Phantom wallet found!');\n\n\t\t\t\t\tconst resp = await solana.connect({ onlyIfTrusted: true });\n\t\t\t\t\tconsole.log(resp.publicKey.toString());\n\t\t\t\t\tsetWalletAddress(resp.publicKey.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('Solana object not found. Get Phanthom wallet!');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\tconst { solana } = window;\n\t\tif (solana) {\n\t\t\tconst resp = await solana.connect();\n\t\t\tconsole.log('Connected to:', resp.publicKey.toString());\n\t\t\tsetWalletAddress(resp.publicKey.toString());\n\t\t}\n\t};\n\n\tconst renderNotConnected = () => (\n\t\t<button\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\tonClick={connectWallet}\n\t\t>\n\t\t\tConnect Wallet\n\t\t</button>\n\t);\n\n\tuseEffect(() => {\n\t\tconst onLoad = async () => {\n\t\t\tawait checkIfWalletIsConnected();\n\t\t};\n\t\twindow.addEventListener('load', onLoad);\n\t\treturn () => window.removeEventListener('load', onLoad);\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header\">🍭 Candy Drop</p>\n\t\t\t\t\t<p className=\"sub-text\">NFT drop machine with fair mint</p>\n\t\t\t\t\t{!walletAddress && renderNotConnected()}\n\t\t\t\t</div>\n\t\t\t\t{walletAddress && <CandyMachine walletAddress={window.solana} />}\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built on @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}